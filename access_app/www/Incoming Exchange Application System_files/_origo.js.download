// _origo.js
// Some utility functions

var _origo = {};

// Unique ID counter
_origo.uniqueId = (function() {
    var i = 0;
    // prefix, suffix
    return function(p, s) {
        return (p ? p + '-' : '') + 'ogid-' + String(i++) + (s ? '-' + s : '');
    };
})();

_origo.translate = {
    ymd2short: function(datestring) {
        // DD
        var mon = {
            '01': 'Jan',
            '02': 'Feb',
            '03': 'Mar',
            '04': 'Apr',
            '05': 'May',
            '06': 'Jun',
            '07': 'Jul',
            '08': 'Aug',
            '09': 'Sept',
            '10': 'Oct',
            '11': 'Nov',
            '12': 'Dec'
        };
        return datestring.substr(6, 2) + "-" + mon[datestring.substr(4, 2)] + "-" + datestring.substr(0, 4);
    },
    filesize: function(sizeString) {
        var unit = 'byte',
            size = Number(sizeString);

        if (1024 < size) {
            size /= 1024;
            unit = 'KiB';
        }
        if (1024 < size) {
            size /= 1024;
            unit = 'MiB';
        }
        /*
        if(1024 < size) { size /= 1024; unit = 'GiB'; }
        if(1024 < size) { size /= 1024; unit = 'TiB'; }
        if(1024 < size) { size /= 1024; unit = 'PiB'; }
        if(1024 < size) { size /= 1024; unit = 'EiB'; }
        if(1024 < size) { size /= 1024; unit = 'ZiB'; }
        if(1024 < size) { size /= 1024; unit = 'YiB'; }
*/

        return size.toFixed(2) + unit;
    }
};

// Executing a function callback after a delay ms
// If this function is called again before the delay ends,
// the previous
_origo.delay = (function() {
    var timer = 0;
    return function(callback, ms) {
        clearTimeout(timer);
        timer = setTimeout(callback, ms);
    };
})();


/**
 * function: isEmptyElement
 *
 * Return true if the element's HTML is empty
 */
_origo.isEmptyElement = function(element) {
    return !$.trim(element.html());
};

/**
 * function: convertToUniqueNames
 *
 * Change all name fields for inputs with class 'input-multiple' into unique name fields
 */
_origo.convertToUniqueNames = (function() {
    var uniqueId = 1;
    return function(element) {
        $(element).find(':input.input-multiple').each(function(index, element) {
            if (!($(element).data('original-name'))) {
                var name = $(element).attr('name');
                $(element).data('original-name', name);
                $(element).attr('name', uniqueId + '_' + name);
                uniqueId++;
            }
        });
    };
})();

/**
 * function: revertFromUniqueNames
 *
 * Revert from unique name field into original name
 */
_origo.revertFromUniqueNames = function(element) {
    $(element).find(':input.input-multiple').each(function(index, element) {
        if ($(element).data('original-name')) {
            $(element).attr('name', $(element).data('original-name'));
            $(element).removeData('original-name');
        }
    });
};

// Case-insensitive inArray
_origo.inArrayIn = function(elem, arr, i) {
    // not looking for a string anyways, use default method
    if (typeof elem !== 'string') {
        return $.inArray.apply(this, arguments);
    }
    // confirm array is populated
    if (arr) {
        var len = arr.length;
        i = i ? (i < 0 ? Math.max(0, len + i) : i) : 0;
        elem = elem.toLowerCase();
        for (; i < len; i++) {
            if (i in arr && arr[i].toLowerCase() == elem) {
                return i;
            }
        }
    }
    // stick with inArray/indexOf and return -1 on no match
    return -1;
};
